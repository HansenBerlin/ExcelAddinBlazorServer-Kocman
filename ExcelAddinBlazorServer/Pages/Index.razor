@page "/"
@using Microsoft.Fast.Components.FluentUI
@using System.Text.Json
@inject IJSRuntime _jsRuntimeService;

<div style="display: flex; flex-direction: column; margin-top: 12px;width: 280px">
    <label for="tables">Auswahl der Tabelle</label>
    <FluentSelect TOption="string"
                  Items="@tables"
                  Id="tables"
                  OptionValue="@(p => p.ToString())"
                  OptionText="@(p => p.ToString())"
                  @bind-Value="@SelectedTable"
                  SelectedOptionChanged="async (s) => await Callback(s)"/>
</div>

<div style="display: flex; flex-direction: column; margin-top: 12px; width: 280px">
    <label for="categories">Aufteilung nach kategorialer Variable in Tabelle @SelectedTable</label>
    <FluentSelect TOption="string"
                  Items="@categories"
                  Id="categories"
                  OptionValue="@(p => p.ToString())"
                  OptionText="@(p => p.ToString())"
                  @bind-Value="@SelectedVariable" />
</div>

<div style="display: flex; flex-direction: column; margin-top: 12px; width: 280px">
    <label for="boxplotValues">Für welche Werte (Spalte) sollen die Boxplotkennzahlen erzeugt werden?</label>
        <FluentSelect TOption="string"
                      Items="@categories"
                      Id="boxplotValues"
                      OptionValue="@(p => p.ToString())"
                      OptionText="@(p => p.ToString())"
                      @bind-Value="@SelectedBoxplotValues" />
</div>

<FluentButton Appearance="Appearance.Outline" style="width: 280px;" @onclick="@(async () => await _jsRuntimeService.InvokeVoidAsync("listWorksheets", _lDotNetReference))">UPDATE</FluentButton>
<FluentButton Appearance="Appearance.Outline" style="width: 280px;" @onclick="async () => await Write()">CREATE</FluentButton>
<FluentButton Appearance="Appearance.Outline" style="width: 280px;" @onclick="async () => await Delete()">DELETE</FluentButton>
<FluentButton Appearance="Appearance.Outline" style="width: 280px;" @onclick="async () => await Reset()">RESET</FluentButton>
<FluentButton Appearance="Appearance.Outline" style="width: 280px;" @onclick="async () => await Calc()">SET FORMULAS</FluentButton>

@code{

    private async Task Callback(string changed)
    {
        Console.WriteLine(changed);
        UpdateCategoriesCollection(changed);
        
    }
    
    private string? SelectedTable { get; set; } = "";
    private string? SelectedVariable { get; set; } = "";
    private string? SelectedBoxplotValues { get; set; } = "";
    private string ActiveSheet = ""; 

    readonly List<string> categories = new();
    readonly List<string> tables = new();
    private List<TableModel> Tables { get; set; } = new();
    private JsonSerializerOptions _options;
    private DotNetObjectReference<Index> _lDotNetReference;
    
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
            _lDotNetReference = DotNetObjectReference.Create(this);
            await _jsRuntimeService.InvokeVoidAsync("registerOnActivateHandler", _lDotNetReference);
            await _jsRuntimeService.InvokeVoidAsync("listWorksheets");
            StateHasChanged();
        }
    }
    
    private async Task Write()
    {
        //var sheet = GetSheet();
        var json = await _jsRuntimeService.InvokeAsync<JsonElement>("getValuesFromColumn", ActiveSheet, SelectedTable, SelectedVariable);

        var tbl = json.Deserialize<object[][]>(_options);
        
        List<string> distinctValues = new();
        (tbl ?? Array.Empty<object[]>()).ToList().ForEach(e =>
        {
            if (distinctValues.Contains(e[0].ToString()) == false)
                distinctValues.Add(e[0].ToString());
        });
        await _jsRuntimeService.InvokeVoidAsync("add", ActiveSheet, SelectedTable, SelectedVariable, distinctValues);
        await _jsRuntimeService.InvokeVoidAsync("listWorksheets");
    }
    
    private async Task Delete()
    {
        await _jsRuntimeService.InvokeVoidAsync("deleteLastWorksheet");
        await _jsRuntimeService.InvokeVoidAsync("listWorksheets");
    }
    
    private async Task Calc()
    {
        await _jsRuntimeService.InvokeVoidAsync("createBoxplotFormulas", ActiveSheet, SelectedTable, SelectedBoxplotValues);
    }
    
    private async Task Reset()
    {
        /*for (int i = 0; i < Worksheets.Count - 1; i++)
        {
            await _jsRuntimeService.InvokeVoidAsync("deleteLastWorksheet");
        }*/
        await _jsRuntimeService.InvokeVoidAsync("listWorksheets");
    }

    [JSInvokable]
    public async Task CallbackAllTablesInActiveWorksheet(JsonElement tablesArray, string activeSheetName)
    {
        var tablescb = tablesArray.Deserialize<TableModel[]>(_options);
        ActiveSheet = activeSheetName;
        Tables.Clear();
        tables.Clear();
        Tables.AddRange(tablescb);
        foreach (var tbl in Tables)
        {
            tables.Add(tbl.TableName);
            Console.WriteLine(tbl.TableName);
            Console.WriteLine(tbl.Categories.Length);
        }
        SelectedTable = Tables.Count > 0 ? Tables[0].TableName : "";
        //UpdateTablesCollection();
        UpdateCategoriesCollection(SelectedTable);
        await InvokeAsync(StateHasChanged);

    }

    void UpdateCategoriesCollection(string selectedTable)
    {
        categories.Clear();
        foreach (var table in Tables)
        {
            if (table.TableName != selectedTable) continue;
            for (int i = 0; i < table.Categories.Length; i++)
            {
                bool state = i == 0;
                if (state)
                {
                    SelectedVariable = table.Categories[i];
                }
                    
                categories.Add(table.Categories[i]);
            }
        }
    }
}